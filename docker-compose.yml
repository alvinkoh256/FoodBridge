version: "3.8"

services:
  # ---------------------------
  # RabbitMQ & AMQP Setup
  # ---------------------------
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - esd-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  amqp-setup:
    build:
      context: .
      dockerfile: rabbitmq/Dockerfile
    container_name: amqp-setup
    restart: "no"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - esd-net

  # ---------------------------
  # Kong / API Gateway (Optional)
  # ---------------------------
  kong:
    image: kong/kong-gateway:3.9
    container_name: kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong.yml:/etc/kong/kong.yml:ro
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - esd-net

  # ---------------------------
  # Core Services
  # ---------------------------
  hub:
    build:
      context: ./services/atomic/hub
      dockerfile: Dockerfile
    image: wongyh01/hub:1.0
    container_name: hub
    ports:
      - "5010:5010"
    networks:
      - esd-net

  product_validation:
    build:
      context: ./services/atomic/product_validation
      dockerfile: Dockerfile
    image: wongyh01/product_validation:1.0
    container_name: product_validation
    env_file:
      - .env
    ports:
      - "5004:5004"
    networks:
      - esd-net

  product_listing:
    build:
      context: ./services/atomic/product_listing
      dockerfile: Dockerfile
    image: wongyh01/product_listing:1.0
    container_name: product_listing
    env_file:
      - .env
    environment:
      - WEBSOCKET_URL=http://websocket:5014
    ports:
      - "5005:5005"
    depends_on:
      - websocket
    networks:
      - esd-net

  locating:
    build:
      context: ./services/atomic/locating
      dockerfile: Dockerfile
    image: wongyh01/locating:1.0
    container_name: locating
    env_file:
      - .env
    environment:
      - GRPC_PORT=5006
    ports:
      - "5006:5006"
    networks:
      - esd-net

  # ---------------------------
  # Composite Services
  # ---------------------------
  find_volunteers:
    build:
      context: ./services/composite/findVolunteers
      dockerfile: Dockerfile
    image: wongyh01/find_volunteers:1.0
    container_name: find_volunteers
    depends_on:
      - product_listing
      - product_validation
      - locating
      - amqp-setup
      - hub
    env_file:
      - .env
    environment:
      - PRODUCT_VALIDATION_URL=http://product_validation:5004
      - PRODUCT_LISTING_URL=http://product_listing:5005
      - LOCATING_SERVICE_URL=locating:5006
      - ACCOUNT_SERVICE_URL=https://personal-tdqpornm.outsystemscloud.com/FoodBridge/rest/AccountInfoAPI
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - SCENARIO12_RABBIT_EXCHANGE=scenario12Exchange
      - SCENARIO12_EXCHANGE_TYPE=fanout
      - HUB_SERVICE_URL=http://hub:5010
    ports:
      - "5001:5001"
    networks:
      - esd-net

  notify_volunteers:
    build:
      context: ./services/composite/notifyVolunteers
      dockerfile: Dockerfile
    container_name: notify_volunteers
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      amqp-setup:
        condition: service_healthy
    environment:
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - SCENARIO12_RABBIT_EXCHANGE=scenario12Exchange
      - SCENARIO12_EXCHANGE_TYPE=fanout
      - SCENARIO2_RABBIT_EXCHANGE=scenario2NotifyExchange
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_CACHE_TTL=1800
    networks:
      - esd-net

  notification_service:
    build:
      context: ./services/atomic/notification
      dockerfile: Dockerfile
    image: wongyh01/notification_service:1.0
    container_name: notification_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
    networks:
      - esd-net

  confirm_delivery:
    build:
      context: ./services/composite/confirmDelivery
      dockerfile: Dockerfile
    container_name: confirm-delivery
    image: wongyh01/confirm-delivery:1.0
    env_file:
      - .env
    environment:
      - HUB_SERVICE_URL=http://hub:5010
      - ACCOUNT_SERVICE_URL=https://personal-tdqpornm.outsystemscloud.com/FoodBridge/rest/AccountInfoAPI
      - PRODUCT_LISTING_URL=http://product_listing:5005
    depends_on:
      - hub
      - amqp-setup
    ports:
      - "5009:5009"
    networks:
      - esd-net

  reserve_hub:
    build:
      context: ./services/composite/reserveHub
      dockerfile: Dockerfile
    container_name: reserve-hub
    image: wongyh01/reserve-hub:1.0
    environment:
      - HUB_SERVICE_URL=http://hub:5010
    ports:
      - "5015:5015"
    networks:
      - esd-net

  route:
    build:
      context: ./services/atomic/route
      dockerfile: Dockerfile
    container_name: route
    image: wongyh01/route:1.0
    env_file:
      - .env
    ports:
      - "5011:5011"
    networks:
      - esd-net

  get_optimal_route:
    build:
      context: ./services/composite/getOptimalRoute
      dockerfile: Dockerfile
    container_name: get-optimal-route
    image: wongyh01/get-optimal-route:1.0
    environment:
      - HUB_SERVICE_URL=http://hub:5010
      - ROUTE_SERVICE_URL=http://route:5011
    ports:
      - "5016:5016"
    networks:
      - esd-net

  # ---------------------------
  # Other Services
  # ---------------------------
  redis:
    image: redis:6
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - esd-net

  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    image: wongyh01/websocket:1.0
    container_name: websocket
    ports:
      - "5014:5014"
    networks:
      - esd-net

volumes:
  rabbitmq_data:
    external: false

networks:
  esd-net:
    driver: bridge